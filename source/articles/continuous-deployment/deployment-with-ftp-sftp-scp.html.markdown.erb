---
title: Continuous Deployment with FTP, SFTP, SCP, RSYNC and SSH
tags: deployment
category: Continuous Deployment
---
# Continuous Deployment to your server with FTP, SFTP, SCP, RSYNC and SSH

We generally advise to use any ssh based tools like SFTP or SCP for deployment.

+ [Continuous Deployment with FTP](#ftp)
+ [Authenticating via SSH public keys](#authenticate)
+ [Continuous Deployment with SFTP](#sftp)
+ [Continuous Deployment with SCP](#scp)
+ [Continuous Deployment with RSYNC](#rsync)
+ [Run scripts with SSH](#run-scripts)

## [Continuous Deployment with FTP](#ftp){:name="ftp"}

For ftp we have recommend using _lftp_ for uploading your files. The following section will help you get started.

To keep your password out of your build logs, add it as an environment variable in your project configuration

~~~shell
FTP_PASSWORD="your_ftp_password"
FTP_USER="your_ftp_username"
~~~

To recursivly upload a director to a remote server, you would use a command like the following

~~~shell
lftp -e "mirror -R {local dir} {remote dir}" -u {username},{password} {host}
~~~

So if you wanted to copy all of your repository to a remote server, you could add the following command to a _script deployment_ on the branch you want to deploy.

* Make sure your _remote dir_ does not end with a slash unless you want your copy to live in a subdirectory called _clone_.
* Also make sure your _remote dir_ already exists before trying your first deployment.

~~~shell
lftp -e "mirror -R ~/clone/ /directory/on/your/server" -u $FTP_USER,$FTP_PASSWORD your.server.com
~~~

For more information on using _lftp_ please see the [man page](http://manpages.ubuntu.com/manpages/quantal/en/man1/lftp.1.html) available online.

## [Authenticating via SSH public keys](#authenticate){:name="authenticate"}

All of the methods below can use key based authentication. As this does not require you to provide your account password to Codeship, we strongly advise to configure this.

You need to add the <%= docs_link_to "Codeship public SSH Key", "/continuous-integration/where-can-i-find-the-ssh-public-key-for-my-project/" %> to your authorized_keys file on the server. This file is located in a folder called ```.ssh``` beneath your home directory. Below is a little script which prepares everything and opens an editor window where you can simply paste your key and save the file.

~~~shell
mkdir -p ~/.ssh
touch ~/.ssh/authorized_keys
chmod -R go-rwx ~/.ssh/

# add the Codeship public SSH key to ~/.ssh/authorized_keys
editor ~/.ssh/authorized_keys
~~~

## [Continuous Deployment with SFTP](#sftp){:name="sftp"}

SFTP supports FTP like commands over an encrypted SSH session. You can automate SFTP by creating a batchfile and handing it to SFTP. The batchfile can contain any commands documented in the interactive commands section of the [SFTP man page](http://manpages.ubuntu.com/manpages/quantal/en/man1/sftp.1.html).

As with the the FTP example above, we will deploy the complete repository contents onto a remote server.

Please add a file containing the following directives to your repository. You can name it any way you like. In our case we will call it _production_ and store it in a subdirectory called _deploy_.

~~~ftp
mkdir /directory/on/your/server
put -r ~/clone/* /directory/on/your/server/
~~~

For the <%= docs_link_to "branch you want to deploy", "/continuous-deployment/deployment-pipelines/" %> you create a script deployment that contains:

~~~shell
sftp -b deploy/production USER@YOUR_SERVER
~~~

Make sure you add the <%= docs_link_to "SSH Key of your project", "/continuous-integration/where-can-i-find-the-ssh-public-key-for-my-project/" %>
into [your servers ***authorized_keys file***](#authenticate).

## [Continuous Deployment with SCP](#scp){:name="scp"}

SCP allows you to copy files from your local system to another server. With the ***-r*** option
you can also recursively upload directories. You can read more about the different options
in the [SCP man page](http://linux.die.net/man/1/scp).

For the <%= docs_link_to "branch you want to deploy", "/continuous-deployment/deployment-pipelines/" %> you create a script deployment that contains:

~~~shell
scp -rp source_directory user@dest:/path
~~~

Make sure you add the <%= docs_link_to "SSH Key of your project", "/continuous-integration/where-can-i-find-the-ssh-public-key-for-my-project/" %>
into your servers ***authorized_keys file***.

## [Continuous Deployment with RSYNC](#rsync){:name="rsync"}

Rsync is an amazing tool to sync your local filesystem with an external server. Rsync
will check the files and only upload files that have changed.

For the <%= docs_link_to "branch you want to deploy", "/continuous-deployment/deployment-pipelines/" %> you create a script deployment that contains:

~~~shell
rsync -av dir_to_upload USER@REMOTE_SERVER:/remote/dir
~~~

or run rsync over ssh:

~~~shell
rsync -avz -e "ssh OTHER_SSH_OPTION" local_directory USER@REMOTE_SERVER:~/testfolder
~~~

You can read more about the Rsync options in the [Rsync manpage](http://linux.die.net/man/1/rsync).
Make sure you add the <%= docs_link_to "SSH Key of your project", "/continuous-integration/where-can-i-find-the-ssh-public-key-for-my-project/" %>
into your servers ***authorized_keys file***.

## [Start services for deployment through SSH](#run-scripts){:name="run-scripts"}

If you give a command as the last parameter to SSH it will run this command on the server
and exit with the return status of that command. This can be used to start services
or trigger a deployment on an external system.

~~~shell
ssh USER@HOST "deploy_code.sh"
~~~

Make sure you add the <%= docs_link_to "SSH Key of your project", "/continuous-integration/where-can-i-find-the-ssh-public-key-for-my-project/" %>
into your servers ***authorized_keys file***.
