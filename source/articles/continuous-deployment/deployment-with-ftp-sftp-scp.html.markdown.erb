---
title: Continuous Deployment with FTP, SFTP, SCP and RSYNC
tags: deployment
category: Continuous Deployment
---
# Continuous Deployment to your server with FTP, SFTP, SCP and RSYNC

We generally advise to use any ssh based tools like SFTP or SCP for deployment.

+ [FTP](#ftp)
+ [SFTP](#sftp)
+ [SCP](#scp)
+ [RSYNC](#rsync)
+ [Run scripts with SSH](#run-scripts)

## [Continuous Deployment with FTP](#ftp){:name="ftp"}

For ftp the best tool to use is ftp-upload

First you put the ftp password into your Environment settings.

~~~shell
FTP_PASSWORD=YOUR_PASSWORD
~~~

Then for the <%= docs_link_to "branch you want to deploy", "/continuous-deployment/deployment-pipelines/" %> you create a script deployment that contains:

~~~shell
echo $FTP_PASSWORD â”‚ ftp-upload -sh $host -u $user FILES_TO_UPLOAD
~~~

which will upload the file to your server

## [Continuous Deployment with SFTP](#sftp){:name="sftp"}

SFTP supports FTP like commands over an encrypted SSH session. You can automate
SFTP by creating a batchfile and handing it to SFTP:

~~~ftp
mkdir testdir
cd testdir
put batchfile
~~~

The batchfile can contain any commands documented in the interactive commands section of the [SFTP manpage](http://unixhelp.ed.ac.uk/CGI/man-cgi?sftp+1)

For the <%= docs_link_to "branch you want to deploy", "/continuous-deployment/deployment-pipelines/" %> you create a script deployment that contains:

~~~shell
sftp -b batchfile USER@YOUR_SERVER
~~~

Make sure you add the <%= docs_link_to "SSH Key of your project", "/continuous-integration/where-can-i-find-the-ssh-public-key-for-my-project/" %>
into your servers ***authorized_keys file***.

## [Continuous Deployment with SCP](#scp){:name="scp"}

SCP allows you to copy files from your local system to another server. With the ***-r*** option
you can also recursively upload directories. You can read more about the different options
in the [SCP Manpage](http://linux.die.net/man/1/scp).

For the <%= docs_link_to "branch you want to deploy", "/continuous-deployment/deployment-pipelines/" %> you create a script deployment that contains:

~~~shell
scp -rp source_directory user@dest:/path
~~~

Make sure you add the <%= docs_link_to "SSH Key of your project", "/continuous-integration/where-can-i-find-the-ssh-public-key-for-my-project/" %>
into your servers ***authorized_keys file***.

## [Continuous Deployment with RSYNC](#rsync){:name="rsync"}

Rsync is an amazing tool to sync your local filesystem with an external server. Rsync
will check the files and only upload files that have changed.

For the <%= docs_link_to "branch you want to deploy", "/continuous-deployment/deployment-pipelines/" %> you create a script deployment that contains:

~~~shell
rsync -av /local/dir server:/remote/dir
~~~

You can read more about the Rsync options in the [Rsync manpage](http://linux.die.net/man/1/rsync).
Make sure you add the <%= docs_link_to "SSH Key of your project", "/continuous-integration/where-can-i-find-the-ssh-public-key-for-my-project/" %>
into your servers ***authorized_keys file***.

## [Start services for deployment through SSH](#run-scripts){:name="run-scripts"}

If you give a command as the last parameter to SSH it will run this command on the server
and exit with the return status of that command. This can be used to start services
or trigger a deployment on an external system.

~~~shell
ssh USER@HOST "deploy_code.sh"
~~~

Make sure you add the <%= docs_link_to "SSH Key of your project", "/continuous-integration/where-can-i-find-the-ssh-public-key-for-my-project/" %>
into your servers ***authorized_keys file***.
